// Лекции по С#(Последовательность Фиббоначчи) O(2^n)
// Последовательность Фибонначчи (последовательность Фибоначчи лучше не решать методом рекурсии 
// т.к. сложность очень высокая и заключается в том, что на один вызов накладывается еще 2 вызова)

Console.Clear();
Console.Write("Введите число: ");

int n = int.Parse(Console.ReadLine()!), a0 = 0, a1 = 1, x;

//1 вариант это линейный алгоритм
for (int i = 0; i < n; i++)
{
    x = a0 + a1;
    a0 = a1;
    a1 = x;
}

//2 вариант это рекурсивный метод
int fib(int n)
{
    if (n == 0)
        return 0;
    if (n == 1)
        return 1;
    return fib(n - 1) + fib(n - 2);
}


Console.WriteLine($"I - {a0}"); // O(39) при линейном алгоритме мы операцию выполняем всего 39 раз
Console.WriteLine($"II(рекурсия) - {fib(n)}"); // O(2 ^ 39) т.е мы при рекурсивном методе решения задач выполняем операцию в 2 в 39 степени
// 0 1 1 2 3 5 8
// 0 1 2 3 4 5 6 7

// Метод быстрой сортировки т. е. рекурсивный метод как работает:
// [5, 4, 0, 2, 1]
// Опорный элемент - 5
// Первый массив < 5 [4, 0, 2, 1]
// Второй массив = 5 [5]
// Третий массив > 5 []

// [4, 0, 2, 1]
// Опорный элемент - 4
// Первый массив < 4 [0, 2, 1]
// Второй массив = 4 [4]
// Третий массив > 4 []

// [0, 2, 1]
// Опорный элемент - 0
// Первый массив < 0 []
// Второй массив = 0 [0]
// Третий массив > 0 [2, 1]
